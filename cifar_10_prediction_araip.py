# -*- coding: utf-8 -*-
"""Cifar 10 prediction ARAIP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G1G5JBQqdoVBelXyI73bzgkWTNiJI62W
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

from tensorflow.keras import models, layers

model= models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))
model.summary()

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

from google.colab import files
uploaded = files.upload()

from tensorflow.keras import preprocessing
import numpy as np
from tensorflow.keras import models

def load_image(filename):
    # load the image
    img = preprocessing.image.load_img(filename, target_size=(32, 32))
    # convert to array
    img = preprocessing.image.img_to_array(img)
    # reshape into a single sample with 3 channels
    img = img.reshape(1, 32, 32, 3)
    # prepare pixel data
    img = img.astype('float32')
    img = img / 255.0
    return img

def run_example(image_filename):
    # load the image
    img = load_image(image_filename)
    # load model (make sure your model file exists)
    model = models.load_model('final_model.keras')
    # predict the class
    pred_list = model.predict(img)
    result = np.argmax(pred_list[0])
    print(f"Prediction for {image_filename}: {class_names[result]}")
    return class_names[result]

from tensorflow.keras.preprocessing import image
import numpy as np

img_path = 'frog (1).jpg.avif'  # Corrected file extension
img = image.load_img(img_path, target_size=(32, 32))
img_array = image.img_to_array(img) / 255.0  # Normalize
img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension

# Save the trained model
model.save('final_model.keras')
print("Model saved successfully as 'final_model.keras'")

import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
import numpy as np
from tensorflow.keras import models

# Load model and make prediction
model = models.load_model('final_model.keras')
predictions = model.predict(img_array)
predicted_class = class_names[np.argmax(predictions[0])]
print(f"Predicted class: {predicted_class}")

plt.imshow(img)
plt.title(f"Prediction: {predicted_class}")
plt.axis('off')
plt.show()

from tensorflow.keras import models

# Load model and make prediction
model = models.load_model('final_model.keras')
predictions = model.predict(img_array)
predicted_class = class_names[np.argmax(predictions[0])]
print(f"Predicted class: {predicted_class}")

import matplotlib.pyplot as plt

def predict_and_show(image_filename):
    # Load and predict
    img = load_image(image_filename)
    model = models.load_model('final_model.keras')
    pred_list = model.predict(img)
    result = np.argmax(pred_list[0])
    confidence = pred_list[0][result]

    # Display the image
    display_img = preprocessing.image.load_img(image_filename, target_size=(32, 32))
    plt.imshow(display_img)
    plt.title(f"Predicted: {class_names[result]} (Confidence: {confidence:.2f})")
    plt.axis('off')
    plt.show()

    return class_names[result]

# Use this function to see your predictions
predict_and_show('your_image.png')

# save model
model.save('final_model.keras') #previously saved as 'final_model.h5", a legacy

test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print("Test accuracy:", test_acc)

from tensorflow.keras import models, layers

model= models.Sequential()
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))
model.summary()